# -*- encoding: utf-8 -*-


import os
import sys
import re  # utilizo el paquete re para las comprobaciones utilizando expresiones regulares
import socket  # utilizo el paquete socket para la conexión con el servidor whois
import dns.resolver  # utilizo el paquete dns.resolver para las consultas DNS
from pyfiglet import Figlet  # utilizo el paquete pyfiglet para imprimir el banner ASCII
from termcolor import cprint  # del paquete termcolor importamos el módulo cprint

def analizaObjetivo(objetivo):
    # Expresiones regulares basadas en http://stackoverflow.com/questions/5461322/python-check-if-ip-or-dns
    es_IP_valida = re.match("^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$", objetivo)
    # Modifico la segunda expresión para indicar con el operador + que debe contener al menos un sufijo
    es_Nombre_valido = re.match("^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)+([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$", objetivo)

    # Devolvemos 0 si es una IP, 1 si es un nombre y -1 si no es un objetivo válido
    if es_IP_valida:
        return 0
    elif es_Nombre_valido:
        return 1
    else:
        return -1

def obtenerRegistrosA(objetivo):
    miResolver = dns.resolver.Resolver()
    # Fuerzo a que utilice los servidores DNS de google
    miResolver.nameservers = ["8.8.8.8", "8.8.4.4"]
    try:
        # Realizo una consulta DNS para obtener información de los hosts tipo A del dominio
        respuestas = miResolver.query(objetivo, "A")
        cprint("\t- Registros A obtenidos para %s" % objetivo, "cyan")
        for datosRespuesta in respuestas:
            cprint("\t\t Address: %s" % datosRespuesta, "white")
    except:
        cprint("\t Consulta A fallida", "red")

def obtenerRegistrosNS(objetivo):
    miResolver = dns.resolver.Resolver()
    miResolver.nameservers = ["8.8.8.8", "8.8.4.4"]
    try:
        # Realizo una consulta DNS para obtener información de los servidores DNS del dominio
        respuestas = miResolver.query(objetivo, "NS")
        cprint("\t- Registros NS obtenidos para %s" % objetivo, "cyan")
        for datosRespuesta in respuestas:
            cprint("\t\t Nameserver: %s" % datosRespuesta, "white")
    except:
        cprint("\t Consulta NS fallida", "red")

def obtenerRegistrosTXT(objetivo):
    miResolver = dns.resolver.Resolver()
    miResolver.nameservers = ["8.8.8.8", "8.8.4.4"]
    try:
        # Realizo una consulta DNS para obtener información del registro TXT (entradas SPF y más)
        respuestas = miResolver.query(objetivo, "TXT")
        cprint("\t- Registros TXT obtenidos para %s" % objetivo, "cyan")
        for datosRespuesta in respuestas:
            cprint("\t\t Text: %s" % datosRespuesta, "white")
    except:
        cprint("\t Consulta TXT fallida", "red")

def obtenerRegistrosMX(objetivo):
    miResolver = dns.resolver.Resolver()
    miResolver.nameservers = ["8.8.8.8", "8.8.4.4"]
    try:
        # Realizo una consulta DNS para obtener la información acerca de los servidores de correo del dominio y su preferencia
        respuestas = miResolver.query(objetivo, "MX")
        cprint("\t- Registros MX obtenidos para %s" % objetivo, "cyan")
        for datosRespuesta in respuestas:
            cprint("\t\t Mail Exchanger Host: %s con preferencia: %s" % (datosRespuesta.exchange, datosRespuesta.preference), "white")
    except:
        cprint("\t Consulta MX fallida", "red")

def obtenerRegistrosPTR(objetivo):
    miResolver = dns.resolver.Resolver()
    miResolver.nameservers = ["8.8.8.8", "8.8.4.4"]
    # creo un string con el nombre DNS de la IP correspondiente a la zona inversa
    convertido = '.'.join(reversed(objetivo.split("."))) + ".in-addr.arpa"
    try:
        respuestas = miResolver.query(convertido, "PTR")
        cprint("\t- Información DNS obtenida para %s" % objetivo, "cyan")
        for datosRespuesta in respuestas:
            cprint("\t\t %s \tresolución inversa: %s" % (objetivo, datosRespuesta), "white")
    except:
        cprint("\t Consulta PTR fallida", "red")

def obtenerInfoWhoIs(objetivo):
    # basado en http://code.activestate.com/recipes/577364-whois-client/
    miSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    miSocket.connect(("whois.apnic.net", 43))
    miSocket.send(objetivo + "\r\n")
    # Utilizo una variable de tipo string sobre la cual voy almacenando los paquetes de información que voy recibiendo del socket
    # Cuando dejo de recibir información por el socket, cancelo la iteración y cierro el socket
    respuesta = ""
    while True:
        data = miSocket.recv(4096)
        respuesta += data
        if not data:
            break
    miSocket.close()
    # imprimo en consola el volcado completo de la información recibida desde el servidor whois.apnic.net
    cprint("\t- Información Whois obtenida para %s" %objetivo, "cyan")
    cprint("\t\t" + respuesta, "white")

def imprimirInfoDNS_WhoIS(objetivo):
    # analizo el string introducido por el usuario para ver si se trata de una IP o un nombre DNS bien formado
    res = analizaObjetivo(objetivo)
    if res == 0:
        # print "El objetivo %s es una IP válida" % objetivo
        cprint("[+] Información recolectada de la IP: %s " % objetivo, "green", attrs=["bold"])
        obtenerRegistrosPTR(objetivo)
        obtenerInfoWhoIs(objetivo)
    elif res == 1:
        # print "El objetivo %s es nombre válido" % objetivo
        cprint("[+] Información recolectada del nombre DNS: %s " % objetivo, "green", attrs=["bold"])
        obtenerRegistrosA(objetivo)
        obtenerRegistrosNS(objetivo)
        obtenerRegistrosTXT(objetivo)
        obtenerRegistrosMX(objetivo)
        obtenerInfoWhoIs(objetivo)
    else:
        cprint("El objetivo %s no es una IP ni un nombre de dominio" % objetivo, "red")


def main(argv):
    # utilizo el paquete pyfiglet para crear un banner basado en ASCII
    f = Figlet(font='slant')
    print f.renderText("infoDominio")
    print "----------------------------------------------------------"
    print "Mikel Aguirre - Curso CHEE"
    print "----------------------------------------------------------"
    # Pedimos al usuario que introduzca los objetivos
    objetivo1 = raw_input("Introduzca el primer objetivo: ")
    objetivo2 = raw_input("Introduzca el segundo objetivo: ")
    # recolectamos la información del primero y la imprimimos
    imprimirInfoDNS_WhoIS(objetivo1)
    raw_input("Pulsa Enter para continuar")
    # recolectamos la información del segundo y la imprimimos
    imprimirInfoDNS_WhoIS(objetivo2)


if __name__ == '__main__':
    main(sys.argv)
